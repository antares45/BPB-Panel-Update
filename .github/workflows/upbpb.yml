# 工作流名称
name: Update Worker

# 触发条件
on:
# 手动触发工作流
workflow_dispatch:
inputs:
force_update:
description: '强制更新（忽略版本检查）'
required: false
default: 'false'
# 定时触发，每天 UTC 时间凌晨 1 点（北京时间上午 9 点）
schedule:
- cron: "0 1 * * *"

# 权限设置
permissions:
contents: write # 允许工作流写入仓库内容

# 工作流任务
jobs:
update:
runs-on: ubuntu-latest
steps:
# 步骤 1: 检出仓库代码
- name: 检出仓库
uses: actions/checkout@v4
with:
fetch-depth: 0 # 确保完整历史记录，便于提交更改

# 步骤 2: 安装依赖工具
- name: 安装依赖工具
run: |
echo "安装 jq、wget 和 unzip..."
sudo apt-get update -y
sudo apt-get install -y jq wget unzip
jq --version || { echo "错误: jq 安装失败"; exit 1; }
wget --version || { echo "错误: wget 安装失败"; exit 1; }
unzip -v || { echo "错误: unzip 安装失败"; exit 1; }

# 步骤 3: 设置环境变量
- name: 设置环境变量
run: |
echo "REPO_URL=https://api.github.com/repos/bia-pain-bache/BPB-Worker-Panel/releases" >> $GITHUB_ENV
echo "TARGET_FILE=worker.zip" >> $GITHUB_ENV
echo "DEBUG=true" >> $GITHUB_ENV

# 步骤 4: 检查并更新 Worker
- name: 检查并更新 Worker
env:
GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
run: |
# 定义日志函数
log() { echo "[$(date +'%Y-%m-%d %H:%M:%S')] $1"; }

log "开始检查更新..."

# 检查工作目录
log "当前工作目录: $(pwd)"
ls -la

# 获取本地版本
LOCAL_VERSION=$(cat version.txt 2>/dev/null || echo "none")
log "本地版本: $LOCAL_VERSION"

# 获取最新 Release 信息
log "获取 GitHub API 数据..."
RESPONSE=$(curl -s --retry 5 --retry-delay 2 -H "Authorization: token $GITHUB_TOKEN" -H "Accept: application/vnd.github.v3+json" "$REPO_URL")
if [ $? -ne 0 ]; then
log "错误: 无法访问 GitHub API"
echo "API 响应: $RESPONSE"
exit 1
fi

# 检查 API 响应是否有效
if [ -z "$RESPONSE" ] || [ "$(echo "$RESPONSE" | jq -r 'type' 2>/dev/null)" != "array" ]; then
log "错误: GitHub API 响应无效或为空"
echo "API 响应: $RESPONSE"
exit 1
fi

# 调试：输出前几个 Release 的版本号
if [ "$DEBUG" = "true" ]; then
log "调试: 前几个 Release 版本号"
echo "$RESPONSE" | jq -r '.[0:3] | .[].tag_name'
fi

# 提取最新版本号和下载链接
TAG_NAME=$(echo "$RESPONSE" | jq -r '.[0].tag_name' 2>/dev/null)
if [ -z "$TAG_NAME" ]; then
log "错误: 无法提取最新版本号"
exit 1
fi
log "最新版本: $TAG_NAME"

DOWNLOAD_URL=$(echo "$RESPONSE" | jq -r '.[0].assets[] | select(.name == "'"$TARGET_FILE"'") | .browser_download_url' 2>/dev/null)
if [ -z "$DOWNLOAD_URL" ] || [ "$DOWNLOAD_URL" == "null" ]; then
log "错误: 未找到 $TARGET_FILE 的下载链接"
echo "可用资产: $(echo "$RESPONSE" | jq -r '.[0].assets[].name')"
exit 1
fi
log "下载链接: $DOWNLOAD_URL"

# 判断是否需要更新
FORCE_UPDATE=${{ github.event.inputs.force_update || 'false' }}
if [ "$LOCAL_VERSION" = "$TAG_NAME" ] && [ "$FORCE_UPDATE" != "true" ]; then
log "已是最新版本，无需更新"
exit 0
fi

# 下载并更新文件
log "下载 $TARGET_FILE..."
wget -q --tries=3 -O "$TARGET_FILE" "$DOWNLOAD_URL" || { log "错误: 下载 $TARGET_FILE 失败"; exit 1; }
log "解压 $TARGET_FILE..."
unzip -o "$TARGET_FILE" || { log "错误: 解压 $TARGET_FILE 失败"; exit 1; }
rm "$TARGET_FILE"
echo "$TAG_NAME" > version.txt
log "更新完成，新版本: $TAG_NAME"

# 步骤 5: 提交更改
- name: 提交更改
if: success()
uses: stefanzweifel/git-auto-commit-action@v5
with:
commit_message: "🔄 自动同步 Worker 版本: ${{ env.TAG_NAME || '未知' }}"
commit_author: "github-actions[bot] <github-actions[bot]@users.noreply.github.com>"
