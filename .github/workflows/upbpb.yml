# 工作流名称
name: Update Worker

# 触发条件
on:
workflow_dispatch:
inputs:
force_update:
description: '强制更新（忽略版本检查）'
required: false
default: 'false'
schedule:
- cron: "0 1 * * *"

# 权限设置
permissions:
contents: write

# 工作流任务
jobs:
update:
runs-on: ubuntu-latest
steps:
# 步骤 1: 检出仓库代码
- name: 检出仓库
uses: actions/checkout@v4
with:
fetch-depth: 0

# 步骤 2: 安装依赖工具
- name: 安装依赖工具
run: |
echo "安装 jq、wget 和 unzip..."
sudo apt-get update -y
sudo apt-get install -y jq wget unzip
jq --version || { echo "错误: jq 安装失败"; exit 1; }
wget --version || { echo "错误: wget 安装失败"; exit 1; }
unzip -v || { echo "错误: unzip 安装失败"; exit 1; }

# 步骤 3: 设置环境变量
- name: 设置环境变量
run: |
echo "REPO_URL=https://api.github.com/repos/bia-pain-bache/BPB-Worker-Panel/releases" >> $GITHUB_ENV
echo "TARGET_FILE=worker.zip" >> $GITHUB_ENV
echo "DEBUG=true" >> $GITHUB_ENV

# 步骤 4: 检查并更新 Worker
- name: 检查并更新 Worker
env:
GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
run: |
# 定义日志函数
log() { echo "[$(date +'%Y-%m-%d %H:%M:%S')] $1"; }

log "开始检查更新..."

# 输出环境信息
log "当前工作目录: $(pwd)"
log "文件列表:"
ls -la

# 检查 GITHUB_TOKEN 是否存在
if [ -z "$GITHUB_TOKEN" ]; then
log "错误: GITHUB_TOKEN 未设置"
exit 1
fi

# 获取本地版本
LOCAL_VERSION=$(cat version.txt 2>/dev/null || echo "none")
log "本地版本: $LOCAL_VERSION"

# 获取最新 Release 信息
log "请求 GitHub API: $REPO_URL"
RESPONSE=$(curl -s --retry 5 --retry-delay 2 -H "Authorization: token $GITHUB_TOKEN" -H "Accept: application/vnd.github.v3+json" "$REPO_URL")
CURL_EXIT_CODE=$?
if [ $CURL_EXIT_CODE -ne 0 ]; then
log "错误: curl 请求失败，退出代码: $CURL_EXIT_CODE"
exit 1
fi
if [ -z "$RESPONSE" ]; then
log "错误: GitHub API 返回空响应"
exit 1
fi

# 调试：输出 API 响应摘要
if [ "$DEBUG" = "true" ]; then
log "调试: API 响应前 200 字符"
echo "${RESPONSE:0:200}"
fi

# 检查 API 响应是否为有效 JSON
echo "$RESPONSE" | jq -r 'type' 2>/dev/null | grep -q "array" || { log "错误: API 响应不是有效的 JSON 数组"; exit 1; }

# 提取最新版本号
TAG_NAME=$(echo "$RESPONSE" | jq -r '.[0].tag_name' 2>/dev/null)
if [ -z "$TAG_NAME" ] || [ "$TAG_NAME" = "null" ]; then
log "错误: 无法提取版本号"
exit 1
fi
log "最新版本: $TAG_NAME"

# 提取下载链接
DOWNLOAD_URL=$(echo "$RESPONSE" | jq -r '.[0].assets[] | select(.name == "'"$TARGET_FILE"'") | .browser_download_url' 2>/dev/null)
if [ -z "$DOWNLOAD_URL" ] || [ "$DOWNLOAD_URL" = "null" ]; then
log "错误: 未找到 $TARGET_FILE"
log "可用资产:"
echo "$RESPONSE" | jq -r '.[0].assets[].name'
exit 1
fi
log "下载链接: $DOWNLOAD_URL"

# 检查是否需要更新
FORCE_UPDATE=${{ github.event.inputs.force_update || 'false' }}
if [ "$LOCAL_VERSION" = "$TAG_NAME" ] && [ "$FORCE_UPDATE" != "true" ]; then
log "已是最新版本，无需更新"
exit 0
fi

# 下载文件
log "下载 $TARGET_FILE..."
wget -q --tries=3 -O "$TARGET_FILE" "$DOWNLOAD_URL" || { log "错误: 下载 $TARGET_FILE 失败"; exit 1; }

# 验证下载文件
if [ ! -f "$TARGET_FILE" ]; then
log "错误: $TARGET_FILE 未下载成功"
exit 1
fi
log "文件大小: $(ls -lh $TARGET_FILE | awk '{print $5}')"

# 解压文件
log "解压 $TARGET_FILE..."
unzip -o "$TARGET_FILE" || { log "错误: 解压 $TARGET_FILE 失败"; exit 1; }
rm "$TARGET_FILE"

# 更新版本号
echo "$TAG_NAME" > version.txt
log "更新完成，新版本: $TAG_NAME"

# 步骤 5: 提交更改
- name: 提交更改
if: success()
uses: stefanzweifel/git-auto-commit-action@v5
with:
commit_message: "🔄 自动同步 Worker 版本: ${{ env.TAG_NAME || '未知' }}"
commit_author: "github-actions[bot] <github-actions[bot]@users.noreply.github.com>"
